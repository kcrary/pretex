
sml
name LexFun
alphabet 128

set alpha = (range 'a 'z 'A 'Z)
set space = (or 9 32)
set whitespace = (or 9 32 10 13)
set not_newline = (~ 10)
set tex_symbol = (~ alpha)

regexp comment = (seq 3 (* not_newline) 10)
regexp tex_escape = (or (seq '\ tex_symbol) (seq '\ (+ alpha)))


set text_normal = (~ 2 29 '$ '\)

function text : t =
   '$ => enter_math_echo
   "$$" => enter_math_echo
   "\[" => enter_math_echo
   (seq "\begin{code}" 10) => enter_code
   29 => pop
   tex_escape => echo

   2 => skip
   comment => skip
   (+ text_normal) => echo
   epsilon => terminate


set code_symbol = (or '# '$ '% '& '\ '^ '_ '{ '} '~)

function code : t =
   9 => code_tab
   32 => code_space
   10 => code_newline
   13 => skip
   code_symbol => code_symbol

   "\end{code}" => exit_code
   (seq 10 "\end{code}") => exit_code
   27 => enter_text

   2 => skip
   comment => skip
   any => echo
   epsilon => terminate
   

function math : t =
   "$" => pop_echo
   "$$" => pop_echo
   "\]" => pop_echo
   27 => enter_text

   tex_escape => echo

   (+ whitespace) => echo
   (seq '' alpha) => greek
   "->" => arrow
   "|-" => turnstile
   (seq ': space) => colon
   ': => bindcolon
   "lam" => lambda

   2 => skip
   comment => skip
   any => echo
   epsilon => terminate
